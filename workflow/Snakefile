configfile: "config/config.yml"


import os


rule all:
    input:
        expand(
            "results/evaluation_tables/{callset}/report.html",
            callset=config["callsets"].keys(),
        ),


rule get_ref:
    input:
        storage.http(config["ref"]["url"]),
    output:
        "resources/GRCh38.fa",
    conda:
        "envs/bcftools.yml"
    log:
        "logs/get_ref.log",
    shell:
        """
        cp {input} {output} &> {log}
        """


rule truvari_bench:
    input:
        base_vcf=storage.s3(config["base"]["vcf"]),
        base_vcfidx=storage.s3(config["base"]["vcfidx"]),
        comp_vcf=lambda wildcards: storage.s3(
            config["callsets"][wildcards.callset]["vcf"]
        ),
        comp_vcfidx=lambda wildcards: storage.s3(
            config["callsets"][wildcards.callset]["vcfidx"]
        ),
        regions=storage.s3(config["base"]["bed"]),
        ref="resources/GRCh38.fa",
    output:
        base_vcf="results/truvari_bench/{callset}/refine.base.vcf.gz",
        comp_vcf="results/truvari_bench/{callset}/refine.comp.vcf.gz",
    threads: 4
    conda:
        "envs/truvari.yml"
    log:
        "logs/truvari_bench/{callset}.log",
    shell:
        """
        rm -rf results/truvari_bench/{wildcards.callset}/tmp/
        truvari bench \
            --refine --dup-to-ins --pick ac --passonly \
            --sizemax 40000 \
            --base {input.base_vcf} \
            --comp {input.comp_vcf} \
            --output results/truvari_bench/{wildcards.callset}/tmp \
            --reference {input.ref} \
            --includebed {input.regions} \
            &> {log}
        mv results/truvari_bench/{wildcards.callset}/tmp/* \
            results/truvari_bench/{wildcards.callset}/
        rm -r results/truvari_bench/{wildcards.callset}/tmp
        """


## Additional arguments for truvari


## check truvari bench --refine output, no longer need ga4gh step
rule get_discrepancies:
    input:
        base_vcf="results/truvari_bench/{callset}/refine.base.vcf.gz",
        comp_vcf="results/truvari_bench/{callset}/refine.comp.vcf.gz",
    output:
        fn_vcf="results/discrepancies/{callset}/fn.vcf.gz",
        fp_vcf="results/discrepancies/{callset}/fp.vcf.gz",
    conda:
        "envs/bcftools.yml"
    log:
        "logs/discrepancies/{callset}.log",
    shell:
        """
        echo "Extracting FNs" > {log}
        bcftools view -Oz \
            -o {output.fn_vcf} \
            --include 'FMT/BD=="FN"' \
            {input.base_vcf} \
            &>> {log}
        
        echo "Extracting FPs" >> {log}
        bcftools view -Oz \
            -o {output.fp_vcf} \
            --include 'FMT/BD=="FP"' \
            {input.comp_vcf} \
            &>> {log}
        """


rule truvari_anno_svinfo:
    input:
        "results/discrepancies/{callset}/{type}.vcf.gz",
    output:
        "results/truvari_anno/{callset}/{type}_svinfo.vcf",
    conda:
        "envs/truvari.yml"
    log:
        "logs/{callset}/truvari_anno_svinfo_{type}.log",
    threads: 1
    shell:
        """
        truvari anno svinfo -o {output} {input} &> {log}
        """


rule compress_index_vcf:
    input:
        "results/truvari_anno/{prefix}.vcf",
    output:
        "results/truvari_anno/{prefix}.vcf.gz",
        "results/truvari_anno/{prefix}.vcf.gz.csi",
    log:
        "logs/compress_index_vcf/{prefix}.log",
    params:
        extra="-W",
    wrapper:
        "v5.7.0/bio/bcftools/view"


rule get_trfdb:
    input:
        storage.http(config["adotto"]["url"]),
    output:
        trfdb="resources/references/GRCh38_adotto_trf.bed.gz",
        trfdbtbi="resources/references/GRCh38_adotto_trf.bed.gz.tbi",
    log:
        "logs/make_db_for_truvari_anno_trf.log",
    conda:
        "envs/bcftools.yml"
    shell:
        """
        echo "Getting number of columns in {input}" >{log}
        last_col=$(awk -v FS='\\t' 'NR==1 {{print NF; exit}}' <(gzip -dc {input}))
        echo "Number of columns $last_col" >> {log}
        zcat {input} \
            | cut -f1-3,${{last_col}} \
            | bgzip 1> {output.trfdb} 2>>{log}
        tabix {output.trfdb} 2>>{log}
        """


rule extract_ref_chroms:
    input:
        "{prefix}.fa",
        fai="{prefix}.fa.fai",
    output:
        "{prefix}_main.fa",
    log:
        "logs/extract_ref_chroms/{prefix}.log",
    params:
        region=[f"chr{x}" for x in list(range(1, 23)) + ["X", "Y"]],
    wrapper:
        "v5.7.0/bio/samtools/faidx"


rule index_fasta:
    input:
        "{prefix}.fa",
    output:
        "{prefix}.fa.fai",
    log:
        "logs/index_ref/{prefix}.log",
    wrapper:
        "v5.7.0/bio/samtools/faidx"


rule truvari_anno_trf:
    input:
        vcf="results/truvari_anno/{callset}/{type}_svinfo.vcf.gz",
        ref="resources/GRCh38_main.fa",
        refidx="resources/GRCh38_main.fa.fai",
        trfdb="resources/references/GRCh38_adotto_trf.bed.gz",
        trfdbtbi="resources/references/GRCh38_adotto_trf.bed.gz.tbi",
    output:
        "results/truvari_anno/{callset}/{type}_svinfo-trf.vcf",
    conda:
        "envs/truvari.yml"
    log:
        "logs/{callset}/truvari_anno_trf_{type}.log",
    threads: 4
    shell:
        """
        truvari anno trf \
            -i {input.vcf} \
            -o {output} \
            -f {input.ref} \
            -r {input.trfdb} \
            -t {threads} \
            -e trf \
            &> {log}
        """


rule make_variant_tsvs:
    input:
        vcf="results/truvari_anno/{callset}/{type}_svinfo-trf.vcf",
    output:
        tsv="results/variant_tsvs/{callset}/{type}.tsv",
    conda:
        "envs/bcftools.yml"
    log:
        "logs/variant_tsvs/{callset}_{type}.log",
    shell:
        """
        bcftools query -HH \
            -f '%CHROM\t%POS0\t%END\t%SVTYPE\t%SVLEN\t%TRF\t%TRFdiff\t%TRFrepeat\t%TRFovl\t%TRFstart\t%TRFend\t%TRFperiod\t%TRFcopies\t%TRFscore\t%TRFentropy\t%INFO\n' \
            {input.vcf} 1> {output.tsv} 2> {log}
        """


rule get_coords:
    input:
        "results/variant_tsvs/{callset}/{type}.tsv",
    output:
        "results/coords/{callset}/{type}_coords.bed",
    conda:
        "envs/r-tidyverse.yml"
    log:
        "logs/{callset}/get_coords_{type}.log",
    script:
        "scripts/get_coords.R"


rule liftover:
    input:
        bed="results/coords/{callset}/{type}_coords.bed",
        chain=lambda wildcards: storage.http(config["chain"][wildcards.hap]["url"]),
    output:
        lifted="results/liftover/{callset}/{type}_{hap}_lifted.bed",
        unlifted="results/liftover/{callset}/{type}_{hap}_unlifted.txt",
    conda:
        "envs/liftover.yml"
    log:
        "logs/liftover/{callset}/{type}_{hap}.log",
    shell:
        """
        liftOver {input.bed} {input.chain} {output.lifted} {output.unlifted} &> {log}
        """


rule combine_results:
    input:
        variant_tsv=expand(
            "results/variant_tsvs/{{callset}}/{type}.tsv", type=["fn", "fp"]
        ),
        ref_coords=expand(
            "results/coords/{{callset}}/{type}_coords.bed", type=["fn", "fp"]
        ),
        lifted_coords=expand(
            "results/liftover/{{callset}}/{type}_{hap}_lifted.bed",
            type=["fn", "fp"],
            hap=["mat", "pat"],
        ),
    output:
        "results/evaluation_tables/{callset}/report.html",
    params:
        full="results/evaluation_tables/{callset}/full_variant_tbl.tsv",
        sampled="results/evaluation_tables/{callset}/sampled_variant_tbl.tsv",
        rdata="results/evaluation_tables/{callset}/eval_tbl.RData",
        sample_n=config["parameters"]["num_variants"],
        sample_seed=lambda wildcards: config["callsets"][wildcards.callset][
            "random_seed"
        ],
    log:
        "logs/{callset}/combine_results.log",
    conda:
        "envs/r-tidyverse.yml"
    script:
        "scripts/make_variant_table.Rmd"
